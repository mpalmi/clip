## <summary>Super user administration role (DEBUG ONLY - DONT USE IN PRODUCTION)</summary>

########################################
## <summary>
##	Change to the system administrator role.
## </summary>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`superadm_role_change',`
	gen_require(`
		role superadm_r;
	')

	allow $1 superadm_r;
')

########################################
## <summary>
##	Change from the system administrator role.
## </summary>
## <desc>
##	<p>
##	Change from the system administrator role to
##	the specified role.
##	</p>
##	<p>
##	This is an interface to support third party modules
##	and its use is not allowed in upstream reference
##	policy.
##	</p>
## </desc>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`superadm_role_change_to',`
	gen_require(`
		role superadm_r;
	')

	allow superadm_r $1;
')

########################################
## <summary>
##	Execute a shell in the superadm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_shell_domtrans',`
	gen_require(`
		type superadm_t;
	')

	corecmd_shell_domtrans($1, superadm_t)
	allow superadm_t $1:fd use;
	allow superadm_t $1:fifo_file rw_file_perms;
	allow superadm_t $1:process sigchld;
')

########################################
## <summary>
##	Execute a generic bin program in the superadm domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_bin_spec_domtrans',`
	gen_require(`
		type superadm_t;
	')

	corecmd_bin_spec_domtrans($1, superadm_t)
	allow superadm_t $1:fd use;
	allow superadm_t $1:fifo_file rw_file_perms;
	allow superadm_t $1:process sigchld;
')

########################################
## <summary>
##	Execute all entrypoint files in the superadm domain. This
##	is an explicit transition, requiring the
##	caller to use setexeccon().
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_entry_spec_domtrans',`
	gen_require(`
		type superadm_t;
	')

	domain_entry_file_spec_domtrans($1, superadm_t)
	allow superadm_t $1:fd use;
	allow superadm_t $1:fifo_file rw_file_perms;
	allow superadm_t $1:process sigchld;
')

########################################
## <summary>
##	Allow superadm to execute all entrypoint files in
##	a specified domain.  This is an explicit transition,
##	requiring the caller to use setexeccon().
## </summary>
## <desc>
##	<p>
##	Allow superadm to execute all entrypoint files in
##	a specified domain.  This is an explicit transition,
##	requiring the caller to use setexeccon().
##	</p>
##	<p>
##	This is a interface to support third party modules
##	and its use is not allowed in upstream reference
##	policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_entry_spec_domtrans_to',`
	gen_require(`
		type superadm_t;
	')

	domain_entry_file_spec_domtrans(superadm_t, $1)
	allow $1 superadm_t:fd use;
	allow $1 superadm_t:fifo_file rw_file_perms;
	allow $1 superadm_t:process sigchld;
')

########################################
## <summary>
##	Allow superadm to execute a generic bin program in
##	a specified domain.  This is an explicit transition,
##	requiring the caller to use setexeccon().
## </summary>
## <desc>
##	<p>
##	Allow superadm to execute a generic bin program in
##	a specified domain.
##	</p>
##	<p>
##	This is a interface to support third party modules
##	and its use is not allowed in upstream reference
##	policy.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain to execute in.
##	</summary>
## </param>
#
interface(`superadm_bin_spec_domtrans_to',`
	gen_require(`
		type superadm_t;
	')

	corecmd_bin_spec_domtrans(superadm_t, $1)
	allow $1 superadm_t:fd use;
	allow $1 superadm_t:fifo_file rw_file_perms;
	allow $1 superadm_t:process sigchld;
')

########################################
## <summary>
##	Send a SIGCHLD signal to superadm users.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_sigchld',`
	gen_require(`
		type superadm_t;
	')

	allow $1 superadm_t:process sigchld;
')

########################################
## <summary>
##	Inherit and use superadm file descriptors
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_use_fds',`
	gen_require(`
		type superadm_t;
	')

	allow $1 superadm_t:fd use;
')

########################################
## <summary>
##	Read and write superadm user unnamed pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`superadm_rw_pipes',`
	gen_require(`
		type superadm_t;
	')

	allow $1 superadm_t:fifo_file rw_fifo_file_perms;
')
